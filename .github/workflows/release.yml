# .github/workflows/release.yml

# 工作流程名稱
name: Release CI/CD

# 觸發條件：只在 'release' branch 有 push 事件時觸發
on:
  push:
    branches:
      - release

jobs:
  # 建立一個名為 'build' 的工作
  build:
    # 使用策略矩陣 (strategy matrix) 來為不同平台建立 build
    strategy:
      fail-fast: false
      matrix:
        # 定義三個目標平台
        platform: [macos-latest, ubuntu-latest, windows-latest]

    # 設定虛擬機器的作業系統
    runs-on: ${{ matrix.platform }}

    steps:
      # 步驟 1: Checkout 專案程式碼
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步驟 2: 安裝 Node.js 環境
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 步驟 3: 安裝 Rust 工具鏈
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # 步驟 4: 安裝前端依賴
      - name: Install frontend dependencies
        run: npm install

      # 步驟 5: 執行 Tauri build 指令
      - name: Build Tauri application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.platform == 'windows-latest' && '--verbose' || '' }}

      # 步驟 6: 上傳打包好的安裝檔 (Installer)
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ matrix.platform }}
          path: src-tauri/target/release/bundle/

      #步驟 7: 上傳獨立執行檔 (Standalone Executable)
      - name: Upload Standalone Executable Artifact
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.platform }}
          # 根據不同平台，設定不同的執行檔路徑
          path: |
            src-tauri/target/release/ptt_scraper_tauri.exe
            src-tauri/target/release/bundle/macos/*.app
          # 如果找不到檔案也不會讓整個流程失敗
          if-no-files-found: ignore
