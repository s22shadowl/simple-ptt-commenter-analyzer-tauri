# .github/workflows/release.yml

# 工作流程名稱
name: Release CI/CD

# 觸發條件：只在 'release' branch 有 push 事件時觸發
on:
  push:
    branches:
      - release

jobs:
  # 建立一個名為 'build' 的工作
  build:
    # 使用策略矩陣 (strategy matrix) 來為不同平台建立 build
    strategy:
      fail-fast: false
      matrix:
        # 定義三個目標平台
        platform: [macos-latest, ubuntu-latest, windows-latest]

    # 設定虛擬機器的作業系統
    runs-on: ${{ matrix.platform }}

    steps:
      # 步驟 1: Checkout 專案程式碼
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步驟 2: 安裝 Node.js 環境
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 步驟 3: 安裝 Rust 工具鏈
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # 步驟 4: 安裝前端依賴
      - name: Install frontend dependencies
        run: npm install

      # 步驟 5: (僅限 Linux) 安裝 Tauri CLI 所需的系統依賴
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      # 步驟 6: 執行 Tauri build 指令
      # TAURI_PRIVATE_KEY 和 TAURI_KEY_PASSWORD 是用於簽署更新時使用，如果不需要可以移除
      - name: Build Tauri application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          # Tauri CLI 指令，此處為 'build'
          args: ${{ matrix.platform == 'windows-latest' && '--verbose' || '' }}

      # 步驟 7: 上傳打包好的執行檔
      # 這一步會將產生的 .exe, .dmg, .deb 等檔案上傳到 GitHub Actions 的 artifacts 中，方便下載
      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tauri-build-${{ matrix.platform }}
          path: src-tauri/target/release/bundle/
